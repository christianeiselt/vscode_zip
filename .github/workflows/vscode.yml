name: CICD Pipeline

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

#    - name: Set up Node.js
#      uses: actions/setup-node@v3
#      with:
#        node-version: 14

    - name: Download Visual Studio Code
      run: |
        curl -O https://code.visualstudio.com/VSCode-win32-x64-$(cat versions.json | jq -r '.vscode_version').zip
        pwd
        ls -la
        
    - name: dotnet-json-extractorcs
      id: dotnet-json-extractorcs
      uses: chrisfactory/GithubActions@1.0.0.4
      with:
        path: versions.json
        properties: 'name;version;contentVersion;parameters.registryLocation;parameters.registryName.value'
#        propertyAlias: 'contentVersion:version;parameters.registryName.value:registryName'
     

    - run: echo ${{ steps.dotnet-json-extractorcs.outputs.parameters-registryLocation }}
    - run: echo ${{ steps.dotnet-json-extractorcs.outputs.registryName}}
    - run: echo ${{ steps.dotnet-json-extractorcs.outputs.version }} 

    - id: set_var
      run: |
          content=`cat ./versions.json`
          # the following lines are only required for multi line json
          content="${content//'%'/'%25'}"
          content="${content//$'\n'/'%0A'}"
          content="${content//$'\r'/'%0D'}"
          # end of optional handling for multi line json
          echo "::set-output name=versionsJson::$content"
    - run: |
          echo "${{fromJson(steps.set_var.outputs.vscode_version).version}}"
#   - name: Download Extensions
#      run: |
#        cat versions.json | jq -c '.[]' | while read -r extension; do
#          ext_name=$(echo $extension | jq -r '.name')
#          ext_version=$(echo $extension | jq -r '.version')
#          echo $ext_name@$ext_version
#        done
# https://${publisher}.gallery.vsassets.io/_apis/public/gallery/publisher/${publisher}/extension/${extension name}/${version}/assetbyname/Microsoft.VisualStudio.Services.VSIXPackage
#    - name: Create Artifact
#      run: |
#        tar -czf vscode_with_extensions.tar.gz vscode/
#        echo "::set-output name=artifact_path::vscode_with_extensions.tar.gz"

#    - name: Upload Artifact
#      uses: actions/upload-artifact@v3
#      with:
#        name: vscode_with_extensions
#        path: ${{ steps.create_artifact.outputs.artifact_path }}
